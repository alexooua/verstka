{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","className","href","src","alt","type","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yPAgGeA,MA5Ff,WACE,OACI,yBAAKC,UAAU,OACX,4BAAQA,UAAU,SAEd,0BAAMA,UAAU,QAAhB,UACA,6BACI,uBAAGC,KAAK,IAAR,8CACA,uBAAGA,KAAK,IAAR,wCACA,uBAAGA,KAAK,IAAR,wCACA,uBAAGA,KAAK,IAAR,sDAGR,8BACI,6BAASD,UAAU,cACf,qDACA,yBAAKE,IAAI,GAAGC,IAAI,WAEpB,6BAASH,UAAU,YACf,yBAAKA,UAAU,cACX,0CAEJ,yBAAKA,UAAU,cACX,yBAAKA,UAAU,SACX,yBAAKE,IAAI,GAAGC,IAAI,OAChB,qCACA,4CAEJ,yBAAKH,UAAU,SACX,yBAAKE,IAAI,GAAGC,IAAI,OAChB,qCACA,4CAEJ,yBAAKH,UAAU,SACX,yBAAKE,IAAI,GAAGC,IAAI,OAChB,qCACA,8CAIZ,6BAASH,UAAU,cACf,yBAAKA,UAAU,aACX,wFAEJ,yBAAKA,UAAU,cACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,WAAf,oDACA,wCACA,4CACA,uDAGJ,yBAAKA,UAAU,QACX,yBAAKA,UAAU,WAAf,oDACA,wCACA,4CACA,yDAKZ,6BAASA,UAAU,QACf,+DACA,4CAGJ,iCACI,0BAAMA,UAAU,WACZ,uCACA,2BAAOA,UAAU,cAAcI,KAAK,OAAOC,YAAY,SACvD,2BAAOL,UAAU,eAAeI,KAAK,QAAQC,YAAY,WACzD,8BAAUA,YAAY,gBAAtB,KACA,2CAIZ,gCACI,2CACA,yBAAKL,UAAU,UACX,8BACA,8BACA,8BACA,8BACA,+BAEJ,+CAEJ,yBAAKA,UAAU,gBC/ELM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9cbc1268.chunk.js","sourcesContent":["import React from 'react';\nimport './verstka.css';\nimport './App.css';\n\nfunction App() {\n  return (\n      <div className=\"App\">\n          <header className=\"head \">\n\n              <span className=\"logo\">Header</span>\n              <nav>\n                  <a href=\"\">Главная</a>\n                  <a href=\"\">Скиллы</a>\n                  <a href=\"\">Работы</a>\n                  <a href=\"\">Контакты</a>\n              </nav>\n          </header>\n          <main>\n              <section className=\"blockFirst\">\n                  <h1>Hi my is Ivan Ivanich</h1>\n                  <img src=\"\" alt=\"Photo\"/>\n              </section>\n              <section className=\"blockTwo\">\n                  <div className=\"skillsHead\">\n                      <h3>My skills</h3>\n                  </div>\n                  <div className='skillsItem'>\n                      <div className=\"skill\">\n                          <img src=\"\" alt=\"im\"/>\n                          <h3>React</h3>\n                          <p>About skills</p>\n                      </div>\n                      <div className=\"skill\">\n                          <img src=\"\" alt=\"im\"/>\n                          <h3>React</h3>\n                          <p>About skills</p>\n                      </div>\n                      <div className=\"skill\">\n                          <img src=\"\" alt=\"im\"/>\n                          <h3>React</h3>\n                          <p>About skills</p>\n                      </div>\n                  </div>\n              </section>\n              <section className=\"blockThree\">\n                  <div className=\"worksHead\">\n                      <h3>Мои работы</h3>\n                  </div>\n                  <div className=\"worksItems\">\n                      <div className=\"work\">\n                          <div className=\"workImg\">Картинка</div>\n                          <button>Show</button>\n                          <h4>Name project</h4>\n                          <p>Some little description</p>\n\n                      </div>\n                      <div className=\"work\">\n                          <div className=\"workImg\">Картинка</div>\n                          <button>Show</button>\n                          <h4>Name project</h4>\n                          <p>Some little description</p>\n                      </div>\n                  </div>\n\n              </section>\n              <section className=\"hire\">\n                  <h3>I want to work far from you!!!!</h3>\n                  <button>HIRE ME\n                  </button>\n              </section>\n              <section>\n                  <form className=\"message\">\n                      <h3>Contact</h3>\n                      <input className=\"messageName\" type=\"text\" placeholder=\"Name\"/>\n                      <input className=\"messageEmail\" type=\"email\" placeholder=\"E-mail\"/>\n                      <textarea placeholder=\"Your message\"> </textarea>\n                      <button>Send</button>\n                  </form>\n              </section>\n          </main>\n          <footer>\n              <h3>Ivan Ivanov</h3>\n              <div className=\"follow\">\n                  <div></div>\n                  <div></div>\n                  <div></div>\n                  <div></div>\n                  <div></div>\n              </div>\n              <h5>2019 All is ok</h5>\n          </footer>\n          <div className=\"container\"></div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}